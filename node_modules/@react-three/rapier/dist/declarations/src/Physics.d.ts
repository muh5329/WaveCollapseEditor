import type Rapier from "@dimforge/rapier3d-compat";
import { Collider, ColliderHandle, RigidBody, RigidBodyHandle } from "@dimforge/rapier3d-compat";
import React, { FC, ReactNode } from "react";
import { Matrix4, Object3D, Vector3 } from "three";
import { CollisionEnterHandler, CollisionExitHandler, ContactForceHandler, IntersectionEnterHandler, IntersectionExitHandler, RigidBodyAutoCollider, Vector3Array, WorldApi } from "./types";
export interface RigidBodyState {
    rigidBody: RigidBody;
    object: Object3D;
    invertedWorldMatrix: Matrix4;
    setMatrix: (matrix: Matrix4) => void;
    getMatrix: (matrix: Matrix4) => Matrix4;
    /**
     * Required for instanced rigid bodies.
     */
    scale: Vector3;
    isSleeping: boolean;
}
export declare type RigidBodyStateMap = Map<RigidBody["handle"], RigidBodyState>;
export interface ColliderState {
    collider: Collider;
    object: Object3D;
    /**
     * The parent of which this collider needs to base its
     * world position on
     */
    worldParent: Object3D;
}
export declare type ColliderStateMap = Map<Collider["handle"], ColliderState>;
export interface RapierContext {
    rapier: typeof Rapier;
    world: WorldApi;
    rigidBodyStates: RigidBodyStateMap;
    colliderStates: ColliderStateMap;
    rigidBodyEvents: EventMap;
    colliderEvents: EventMap;
    physicsOptions: {
        colliders: RigidBodyAutoCollider;
    };
    isPaused: boolean;
}
export declare const RapierContext: React.Context<RapierContext | undefined>;
export declare type EventMap = Map<ColliderHandle | RigidBodyHandle, {
    onSleep?(): void;
    onWake?(): void;
    onCollisionEnter?: CollisionEnterHandler;
    onCollisionExit?: CollisionExitHandler;
    onIntersectionEnter?: IntersectionEnterHandler;
    onIntersectionExit?: IntersectionExitHandler;
    onContactForce?: ContactForceHandler;
}>;
interface RapierWorldProps {
    children: ReactNode;
    /**
     * Set the gravity of the physics world
     * @defaultValue [0, -9.81, 0]
     */
    gravity?: Vector3Array;
    /**
     * Set the base automatic colliders for this physics world
     * All Meshes inside RigidBodies will generate a collider
     * based on this value, if not overridden.
     */
    colliders?: RigidBodyAutoCollider;
    /**
     * Set the timestep for the simulation.
     * Setting this to a number (eg. 1/60) will run the
     * simulation at that framerate. Alternatively, you can set this to
     * "vary", which will cause the simulation to always synchronize with
     * the current frame delta times.
     *
     * @defaultValue 1/60
     */
    timeStep?: number | "vary";
    /**
     * Pause the physics simulation
     *
     * @defaultValue false
     */
    paused?: boolean;
    /**
     * The update priority at which the physics simulation should run.
     *
     * @defaultValue undefined
     */
    updatePriority?: number;
    /**
     * Interpolate the world transform using the frame delta times.
     * Has no effect if timeStep is set to "vary".
     *
     * @default true
     **/
    interpolate?: boolean;
}
export declare const Physics: FC<RapierWorldProps>;
export {};
