import { Collider } from "@dimforge/rapier3d-compat";
import React, { ReactNode } from "react";
import { UseColliderOptions, CuboidArgs, RoundCuboidArgs, BallArgs, CapsuleArgs, HeightfieldArgs, TrimeshArgs, ConeArgs, CylinderArgs, ConvexHullArgs } from "./types";
export interface ColliderProps extends UseColliderOptions<any> {
    children?: ReactNode;
}
export declare const AnyCollider: React.MemoExoticComponent<React.ForwardRefExoticComponent<ColliderProps & React.RefAttributes<Collider[]>>>;
declare type UseColliderOptionsRequiredArgs<T extends unknown[]> = Omit<UseColliderOptions<T>, "args"> & {
    args: T;
    children?: ReactNode;
};
export declare type CuboidColliderProps = UseColliderOptionsRequiredArgs<CuboidArgs>;
export declare type RoundCuboidColliderProps = UseColliderOptionsRequiredArgs<RoundCuboidArgs>;
export declare type BallColliderProps = UseColliderOptionsRequiredArgs<BallArgs>;
export declare type CapsuleColliderProps = UseColliderOptionsRequiredArgs<CapsuleArgs>;
export declare type HeightfieldColliderProps = UseColliderOptionsRequiredArgs<HeightfieldArgs>;
export declare type TrimeshColliderProps = UseColliderOptionsRequiredArgs<TrimeshArgs>;
export declare type ConeColliderProps = UseColliderOptionsRequiredArgs<ConeArgs>;
export declare type CylinderColliderProps = UseColliderOptionsRequiredArgs<CylinderArgs>;
export declare type ConvexHullColliderProps = UseColliderOptionsRequiredArgs<ConvexHullArgs>;
export declare const CuboidCollider: React.ForwardRefExoticComponent<Omit<UseColliderOptions<CuboidArgs>, "args"> & {
    args: CuboidArgs;
    children?: ReactNode;
} & React.RefAttributes<Collider[]>>;
export declare const RoundCuboidCollider: React.ForwardRefExoticComponent<Omit<UseColliderOptions<RoundCuboidArgs>, "args"> & {
    args: RoundCuboidArgs;
    children?: ReactNode;
} & React.RefAttributes<Collider[]>>;
export declare const BallCollider: React.ForwardRefExoticComponent<Omit<UseColliderOptions<BallArgs>, "args"> & {
    args: BallArgs;
    children?: ReactNode;
} & React.RefAttributes<Collider[]>>;
export declare const CapsuleCollider: React.ForwardRefExoticComponent<Omit<UseColliderOptions<CapsuleArgs>, "args"> & {
    args: CapsuleArgs;
    children?: ReactNode;
} & React.RefAttributes<Collider[]>>;
export declare const HeightfieldCollider: React.ForwardRefExoticComponent<Omit<UseColliderOptions<HeightfieldArgs>, "args"> & {
    args: HeightfieldArgs;
    children?: ReactNode;
} & React.RefAttributes<Collider[]>>;
export declare const TrimeshCollider: React.ForwardRefExoticComponent<Omit<UseColliderOptions<TrimeshArgs>, "args"> & {
    args: TrimeshArgs;
    children?: ReactNode;
} & React.RefAttributes<Collider[]>>;
export declare const ConeCollider: React.ForwardRefExoticComponent<Omit<UseColliderOptions<ConeArgs>, "args"> & {
    args: ConeArgs;
    children?: ReactNode;
} & React.RefAttributes<Collider[]>>;
export declare const CylinderCollider: React.ForwardRefExoticComponent<Omit<UseColliderOptions<CylinderArgs>, "args"> & {
    args: CylinderArgs;
    children?: ReactNode;
} & React.RefAttributes<Collider[]>>;
export declare const ConvexHullCollider: React.ForwardRefExoticComponent<Omit<UseColliderOptions<ConvexHullArgs>, "args"> & {
    args: ConvexHullArgs;
    children?: ReactNode;
} & React.RefAttributes<Collider[]>>;
export {};
