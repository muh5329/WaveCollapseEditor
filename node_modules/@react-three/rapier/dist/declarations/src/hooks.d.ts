import React, { MutableRefObject } from "react";
import { RapierContext } from "./Physics";
import { Object3D } from "three";
import type Rapier from "@dimforge/rapier3d-compat";
export declare const useRapier: () => RapierContext;
import { UseRigidBodyOptions, UseImpulseJoint, SphericalJointParams, FixedJointParams, PrismaticJointParams, RevoluteJointParams, RigidBodyApi, RigidBodyApiRef } from "./types";
import { ColliderProps, RigidBodyProps } from ".";
export declare const useChildColliderProps: <O extends Object3D<import("three").Event>>(ref: React.MutableRefObject<O | null | undefined>, options: RigidBodyProps, ignoreMeshColliders?: boolean) => ColliderProps[];
export declare const useRigidBody: <O extends Object3D<import("three").Event>>(options?: UseRigidBodyOptions) => [React.MutableRefObject<O>, import("./api").RigidBodyApi, ColliderProps[]];
export declare const useImpulseJoint: <T extends Rapier.ImpulseJoint>(body1: RigidBodyApiRef, body2: RigidBodyApiRef, params: Rapier.JointData) => {
    raw: () => Rapier.ImpulseJoint | undefined;
    readonly handle: number;
    configureMotorPosition: (targetPos: number, stiffness: number, damping: number) => void;
    configureMotorVelocity: (targetVel: number, damping: number) => void;
};
/**
 *
 * A fixed joint ensures that two rigid-bodies don't move relative to each other.
 * Fixed joints are characterized by one local frame (represented by an isometry) on each rigid-body.
 * The fixed-joint makes these frames coincide in world-space.
 */
export declare const useFixedJoint: UseImpulseJoint<FixedJointParams>;
/**
 * The spherical joint ensures that two points on the local-spaces of two rigid-bodies always coincide (it prevents any relative
 * translational motion at this points). This is typically used to simulate ragdolls arms, pendulums, etc.
 * They are characterized by one local anchor on each rigid-body. Each anchor represents the location of the
 * points that need to coincide on the local-space of each rigid-body.
 */
export declare const useSphericalJoint: UseImpulseJoint<SphericalJointParams>;
/**
 * The revolute joint prevents any relative movement between two rigid-bodies, except for relative
 * rotations along one axis. This is typically used to simulate wheels, fans, etc.
 * They are characterized by one local anchor as well as one local axis on each rigid-body.
 */
export declare const useRevoluteJoint: UseImpulseJoint<RevoluteJointParams>;
/**
 * The prismatic joint prevents any relative movement between two rigid-bodies, except for relative translations along one axis.
 * It is characterized by one local anchor as well as one local axis on each rigid-body. In 3D, an optional
 * local tangent axis can be specified for each rigid-body.
 */
export declare const usePrismaticJoint: UseImpulseJoint<PrismaticJointParams>;
