import { Collider, RigidBody } from "@dimforge/rapier3d-compat";
import { MutableRefObject } from "react";
import { BufferGeometry, Object3D, Vector3 } from "three";
import { ColliderProps, RigidBodyProps } from ".";
import { WorldApi } from "./api";
import { ColliderState, ColliderStateMap, EventMap } from "./Physics";
import { ColliderShape, RigidBodyAutoCollider } from "./types";
export declare const scaleColliderArgs: (shape: ColliderShape, args: (number | ArrayLike<number> | {
    x: number;
    y: number;
    z: number;
})[], scale: Vector3) => (number | ArrayLike<number> | {
    x: number;
    y: number;
    z: number;
})[];
export declare const createColliderFromOptions: (options: ColliderProps, world: WorldApi, scale: Vector3, rigidBody?: RigidBody) => Collider;
declare type ImmutableColliderOptions = (keyof ColliderProps)[];
export declare const immutableColliderOptions: ImmutableColliderOptions;
export declare const setColliderOptions: (collider: Collider, options: ColliderProps, states: ColliderStateMap) => void;
export declare const useUpdateColliderOptions: (collidersRef: MutableRefObject<Collider[]>, props: ColliderProps, states: ColliderStateMap) => void;
export declare const createColliderState: (collider: Collider, object: Object3D, rigidBodyObject?: Object3D | null) => ColliderState;
interface CreateColliderPropsFromChildren {
    (options: {
        object: Object3D;
        ignoreMeshColliders: boolean;
        options: RigidBodyProps;
    }): ColliderProps[];
}
export declare const createColliderPropsFromChildren: CreateColliderPropsFromChildren;
export declare const getColliderArgsFromGeometry: (geometry: BufferGeometry, colliders: RigidBodyAutoCollider) => {
    args: unknown[];
    offset: Vector3;
};
export declare const useColliderEvents: (collidersRef: MutableRefObject<Collider[] | undefined>, props: ColliderProps, events: EventMap) => void;
export {};
